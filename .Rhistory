x2
x2
library(car)
recode(x2,"'woman'='woman'; 'man'='guy'")
library(car)
recode(x2,"'woman'='woman'; 'man'='guy'")
x2
library(car)
x2
recode(x2,"'woman'='woman'; 'man'='guy'")
x2
ifelse(x2=="man","guy","woman")
dd <- ifelse(x2=="man","guy","woman")
dd
library(raster)
install.packages("raster")
install.packages("raster")
install.packages("sp")
install.packages("sp")
r1 <- raster(nrows=10, ncol=10)
r1
r1[] <- rnorm(100)
plot(r1)
library(sp)
poi1 <- cbind(c(rnorm(10)),c(rnorm(10)))
poi1
poi1.sp <- SpatialPoints(poi1)
plot(poi1.sp)
df <- data.frame(attr1=c("a","b","z","d","e","q","w","r","z","y"), atrr2=c(101:110)) #creating values
df
poi1.spdf <- SpatialPointsDataFrame(poi1.sp,df)
plot(poi1.spdf)
poi1 <- cbind(c(rnorm(10)),c(rnorm(10))) #create 10 random coordinate pairs
poi1 #look at the output
poi1.sp <- SpatialPoints(poi1) #convert list of c. to a spatial object
plot(poi1.sp) #plot the spatial point data set
df <- data.frame(attr1=c("a","b","z","d","e","q","w","r","z","y"), atrr2=c(101:110)) #creating values
plot(poi1.sp) #plot the spatial point data set
plot(poi1.sp) #plot the spatial point data set
df <- data.frame(attr1=c("a","b","z","d","e","q","w","r","z","y"), atrr2=c(101:110)) #creating values
df
poi1.spdf <- SpatialPointsDataFrame(poi1.sp,df)
plot(poi1.spdf)
plot(poi1.spdf)
plot(poi1.sp) #plot the spatial point data set
install.packages("RStoolbox")
lsat
library(RStoolbox)
lsat
lsat[[1]]
plot(lsat[[1]])
x <- lsat[[2:3]]
x
plot(x)
qq <- x[x$B2_dn >18]
plot(qq)
lsat[[1]]
plot(lsat[[2:3]]) #plot band 2 and 3
plot(lsat$B1_dn)#plot band 1 option 2
data(lsat)
x <- lsat[1:10,]
x <- lsat[lsat$B1_dn > 10] #based on logical query
x
poly <- readRDS(system.file("external/trainingPolygons.rds",package = "RStoolbox"))
env <- raster(poly, vals=rnorm(100))
env
plot(env)
x <- extract(env, poly)
x
lsat[] <- rnorm(ncell(lsat))
lsat[]
lsat [lsat < 0] <- NA #set all values below 0 to NA
lsat [lsat < 0] <- NA #set all values below 0 to NA
lsat[]
env[] <- 0
env[]
env[leroy] <- 1
env[poly <- 1
env[poly] <- 1
env[] <- 0 all values in env set to 0 and poly areas to one
env[] <- 0 #all values in env set to 0 and poly areas to one
env[]
env[poly] <- 1
env[]
env[ <- 1
env[] <- 1
env[]
env[] <- 0 #all values in env set to 0 and poly areas to one
env[] <- 1
env[]
env[poly] <- 1
env[]
CRAN_df <- read.table(file="C:/Silvan/Silvan/cm_bundle/CRAN051001a.txt", header = TRUE)
CRAN_mat <- cbind(CRAN_df$long, CRAN_df$lat)
row.names(CRAN_mat) <- 1:nrow(CRAN_mat)
str(CRAN_mat)
CRAN_df <- read.table(file.choose(), header = TRUE)
CRAN_mat <- cbind(CRAN_df$long, CRAN_df$lat)
row.names(CRAN_mat) <- 1:nrow(CRAN_mat)
str(CRAN_mat)
CRAN_mat
row.names((CRAN_mat))
str(CRAN_mat)
getClass("SpatialPoints") #get class definition of "SpatialPoints"
llCRS <- CRS("+proj=longlat +ellps=WGS84")
CRAN_sp <- SpatialPoints(CRAN_mat, proj4string = llCRS)
summary(CRAN_sp)
bbox(CRAN_sp)
CRAN_sp
plot(CRAN_sp)
bbox(CRAN_sp) #bounding box
proj4string(CRAN_sp)
proj4string(CRAN_sp) <- CRS(as.character(NA))
proj4string(CRAN_sp)
CRAN_df <- read.table(file.choose(), header = TRUE) #read data using file.choose()
CRAN_mat <- cbind(CRAN_df$long, CRAN_df$lat) #combining longitude and latitude in CRAN_mat
CRAN_mat #additional to check result
row.names(CRAN_mat) <- 1:nrow(CRAN_mat) #rownames
str(CRAN_mat)
getClass("SpatialPoints") #get class definition of "SpatialPoints"
llCRS <- CRS("+proj=longlat +ellps=WGS84")
CRAN_sp <- SpatialPoints(CRAN_mat, proj4string = llCRS)
summary(CRAN_sp)
bbox(CRAN_sp) #bounding box
proj4string(CRAN_sp)
proj4string(CRAN_sp) <- CRS(as.character(NA))
proj4string(CRAN_sp)
proj4string(CRAN_sp) <- llCRS
proj4string(CRAN_sp)
brazil <- which(CRAN_df$loc == "Brazil")
brazil
coordinates(CRAN_sp)[brazil, ]
summary(CRAN_sp[brazil, ])
south_of_equator <- which(coordinates(CRAN_sp)[, 2] <0)
summary(CRAN_sp[-south_of_equator, ])
str(row.names(CRAN_df))
CRAN_spdf1 <- SpatialPointsDataFrame(CRAN_mat, CRAN_df,proj4string = llCRS, match.ID = TRUE)
CRAN_spdf1[4, ]
str(CRAN_spdf1$loc)
str(CRAN_spdf1)
CRAN_spdf1
CRAN_spdf1[4, ]
str(CRAN_spdf1$loc)
str(CRAN_spdf1[["loc"]])
s <- sample(nrow(CRAN_df))
s
s
all.equal(CRAN_spdf2, CRAN_spdf1)
s <- sample(nrow(CRAN_df)) #random samples of CRAN_df assigned to s
CRAN_spdf2 <- SpatialPointsDataFrame(CRAN_mat, CRAN_df[s,], proj4string = llCRS, match.ID = TRUE)
all.equal(CRAN_spdf2, CRAN_spdf1)
CRAN_spdf2[4, ]
CRAN_df1 <- CRAN_df
row.names(CRAN_df1) <- sample(c(outer(letters, letters,paste, sep = "")), nrow(CRAN_df1))
CRAN_spdf3 <- SpatialPointsDataFrame(CRAN_mat, CRAN_df1,proj4string = llCRS, match.ID = TRUE)
CRAN_df1 <- CRAN_df
row.names(CRAN_df1) <- sample(c(outer(letters, letters,paste, sep = "")), nrow(CRAN_df1)) #outer() =outer product of arrays
CRAN_spdf3 <- SpatialPointsDataFrame(CRAN_mat, CRAN_df1,proj4string = llCRS, match.ID = TRUE)
getClass("SpatialPointsDataFrame")
names(CRAN_spdf1)
str(model.frame(lat ~ long, data = CRAN_spdf1), give.attr = FALSE)
CRAN_spdf4 <- SpatialPointsDataFrame(CRAN_sp, CRAN_df)
all.equal(CRAN_spdf4, CRAN_spdf2)
CRAN_df0 <- CRAN_df
coordinates(CRAN_df0) <- CRAN_mat
proj4string(CRAN_df0) <- llCRS
all.equal(CRAN_df0, CRAN_spdf2)
str(CRAN_df0, max.level = 2)
str(CRAN_df0, max.level = 2)
CRAN_df1 <- CRAN_df
names(CRAN_df1)
coordinates(CRAN_df1) <- c("long", "lat")
proj4string(CRAN_df1) <- llCRS
str(CRAN_df1, max.level = 2)
CRAN_df1 <- CRAN_df
CRAN_df1 #additinal
names(CRAN_df1)
proj4string(CRAN_df1) <- llCRS
coordinates(CRAN_df1) <- c("long", "lat")
proj4string(CRAN_df1) <- llCRS
str(CRAN_df1, max.level = 2)
turtle_df <- read.csv(file.choose())
turtle_df <- read.csv(file.choose())
summary(turtle_df)
timestamp <- as.POSIXlt(strptime(as.character(turtle_df$obs_date),"%m/%d/%Y %H:%M:%S"), "GMT")
turtle_df1 <- data.frame(turtle_df, timestamp = timestamp)
turtle_df1$lon <- ifelse(turtle_df1$lon < 0, turtle_df1$lon +
+ 360, turtle_df1$lon)
turtle_df1$lon <- ifelse(turtle_df1$lon < 0, turtle_df1$lon 360, turtle_df1$lon)
turtle_df1$lon <- ifelse(turtle_df1$lon < 0, turtle_df1$lon +360, turtle_df1$lon)
timestamp <- as.POSIXlt(strptime(as.character(turtle_df$obs_date),"%m/%d/%Y %H:%M:%S"), "GMT")
turtle_df1 <- data.frame(turtle_df, timestamp = timestamp)
turtle_sp <- turtle_df1[order(turtle_df1$timestamp), ]
coordinates(turtle_sp) <- c("lon", "lat")
proj4string(turtle_sp) <- CRS("+proj=longlat +ellps=WGS84")
getClass("Line")
getClass("Lines")
getClass("SpatialLines")
install.packages("maps")
library(maps)
install.packages("maptools")
library(maps)
library(maptools)
japan <- map("world", "japan", plot = FALSE)
japan <- map("world", "japan", plot = T
japan <- map("world", "japan", plot = T)
japan <- map("world", "japan", plot = T)
p4s <- CRS("+proj=longlat +ellps=WGS84")
japan <- map("world", "japan", plot = FALSE) #alternatively: set plot to T and get map of japan
SLjapan <- map2SpatialLines(japan, proj4string = p4s)
str(SLjapan, max.level = 2)
Lines_len <- sapply(slot(SLjapan, "lines"), function(x) length(slot(x,"Lines")))
Lines_len <- sapply(slot(SLjapan, "lines"), function(x) length(slot(x,"Lines")))
table(Lines_len)
Lines_len <- lapply(slot(SLjapan, "lines"), function(x) length(slot(x,"Lines")))
table(Lines_len)
Lines_len <- lapply(slot(SLjapan, "lines"), function(x) length(slot(x,"Lines")))
table(Lines_len)
Lines_len <- sapply(slot(SLjapan, "lines"), function(x) length(slot(x,"Lines")))
table(Lines_len)
Lines_len <- lapply(slot(SLjapan, "lines"), function(x) length(slot(x,"Lines")))
table(Lines_len)
volcano_sl <- ContourLines2SLDF(contourLines(volcano))
t(slot(volcano_sl, "data"))
auck_shore <- MapGen2SL(file.choose(), llCRS)
llCRS <- CRS("+proj=longlat +ellps=WGS84")
auck_shore <- MapGen2SL(file.choose(), llCRS)
summary(auck_shore)
lns <- slot(auck_shore, "lines")
table(sapply(lns, function(x) length(slot(x, "Lines"))))
islands_auck <- sapply(lns, function(x) {
+ crds <- slot(slot(x, "Lines")[[1]], "coords")
+ identical(crds[1, ], crds[nrow(crds), ])
+ })
islands_auck <- sapply(lns, function(x) {
+ crds <- slot(slot(x, "Lines")[[1]], "coords")
+ identical(crds[1, ], crds[nrow(crds), ]) })
islands_auck <- sapply(lns, function(x) {
crds <- slot(slot(x, "Lines")[[1]], "coords")
identical(crds[1, ], crds[nrow(crds), ]) })
islands_auck <- sapply(lns, function(x) {
crds <- slot(slot(x, "Lines")[[1]], "coords")
identical(crds[1, ], crds[nrow(crds), ]) })
table(islands_auck)
#p.42
plot(islands_auck)
getClass("Polygon")
getClass("Polygons")
getClass("SpatialPolygons")
#p.44
islands_sl <- auck_shore[islands_auck]
list_of_Lines <- slot(islands_sl, "lines")
islands_sp <- SpatialPolygons(lapply(list_of_Lines, function(x) {
Polygons(list(Polygon(slot(slot(x, "Lines")[[1]],
"coords"))), ID = slot(x, "ID"))
}), proj4string = CRS("+proj=longlat +ellps=WGS84"))
summary(islands_sp)
order(sapply(slot(islands_sp, "polygons"), function(x) slot(x,"area")), decreasing = TRUE)
library(maps)
state.map <- map("state", plot = FALSE, fill = TRUE)
IDs <- sapply(strsplit(state.map$names, ":"), function(x) x[1])
IDs
state.map
plot(state.map)
plot(state.division)
state
plot(state.)
plot(state.area)
plot(state.map)
IDs <- sapply(strsplit(state.map$names, ":"), function(x) x[1])
IDs
state.map$names #additional
plot(state.map$maps) #additonal
plot(state.map$names) #additonal
plot(state.map) #additonal
state.map$names #additional
IDs
IDs <- sapply(strsplit(state.map$names, ":"), function(x) x[1])
library(maptools)
state.sp <- map2SpatialPolygons(state.map, IDs = IDs,
proj4string = CRS("+proj=longlat +ellps=WGS84"))
state.sp
plot(state.sp)
state.map #additional
plot(state.map) #additional
state.map #additional
IDs  #additional
plot(state.sp)
sat <- read.table(file.choose(), row.names = 5, #"state.sat.data_mod.txt"
header = TRUE)
str(sat)
plot(sat)
state.map <- map("state", plot = T, fill = F)
state.map <- map("state", plot = T, fill = T)
state.map <- map("state", plot = F, fill = T)
names(sat)
id <- match(row.names(sat), row.names(state.sp))
id
plot(id)
names(id)
str(id)
row.names(sat)[is.na(id)]
sat1 <- sat[!is.na(id), ]
sat1
str(sat1)
state.spdf <- SpatialPolygonsDataFrame(state.sp, sat1)
state.sdpf
state.spdf <- SpatialPolygonsDataFrame(state.sp, sat1)
state.sdpf
str(slot(state.spdf, "data"))
str(state.spdf, max.level = 2)
str(state.spdf)
#p.46
sat1[2]
rownames
rownames(sat1)
rownames(sat1)[2]
rownames(sat1)[2] <- "Arizona"
rownames(sat1)[2]
SpatialPolygonsDataFrame(state.sp, sat1)
DC <- "district of columbia"
not_dc <- !(row.names(state.spdf) == DC)
DC
not_dc
not_dc <- !(row.names(state.spdf) = DC)
state.spdf1 <- state.spdf[not_dc, ]
state.spdf1
state.spdf1
dim(state.spdf1)
names(state.sdpf1)
str(sdpf1)
str(sdpf1)
str(spdf1)
names(spdf1)
names(state.spdf1)
names(state.spdf1) #add.
str(state.sdpf1)
str(state.spdf1)
dim(state.spdf1)
names(state.spdf1) #add.
dim(state.spdf1)
state.spdf1 #add.
summary(state.spdf1)
load(file.choose())
manitoulin <- high[[4]]
manitoulin_sp <- high[[4]]
load(file.choose())
manitoulin_sp <- high[[4]]
load(file.choose())
load(file="C:/Silvan/Silvan/Uni Wü Master/MB2_R/cm_bundle/high")
load(file.choose())
load(file.choose())
view(high)
View(high)
manitoulin_sp <- high[[4]]
load(file.choose())
View(high)
manitoulin_sp <- high[[4]]
length(slot(manitoulin_sp, "polygons"))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "hole"))
manitoulin_sp
plot(man)
plot(manitoulin_sp)
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "hole"))
str(manitoulin_sp)
namesmanitoulin_sp)
names(manitoulin_sp)
summary(manitoulin_sp)
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "ringDir"))
manitoulin_sp$hole
manitoulin_sp[]
manitoulin_sp[[1]]
manitoulin_sp(1)
dim(manitoulin_sp)
str(manitoulin_sp)
manitoulin_sp[area]
manitoulin_sp[1
manitoulin_sp[1]
manitoulin_sp
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "hole"))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "ringDir"))
manitoulin_sp #add.
str(manitoulin_sp)
library(rgeos)
manitoulin_sp <- createSPComment(manitoulin_sp)
sapply(slot(manitoulin_sp, "polygons"), comment)
plot(manitoulin_sp)
getClass("GridTopology")
bb <- bbox(manitoulin_sp)
bb
cs <- c(0.01, 0.01)
cs
cc <- bb[, 1] + (cs/2)
cc
bb
cd <- ceiling(diff(t(bb))/cs)
cd
manitoulin_grd <- GridTopology(cellcentre.offset = cc,
cellsize = cs, cells.dim = cd)
manitoulin_grd
plot(manitoulin_grd)
manitoulin_grd
getClass("SpatialGrid")
p4s <- CRS(proj4string(manitoulin_sp))
manitoulin_SG <- SpatialGrid(manitoulin_grd, proj4string = p4s)
summary(manitoulin_SG)
summary(manitoulin_SG)
class(auck_el1)
auck_el1 <- raster(file.choose())
class(auck_el1)
slot(auck_el1, "grid")
auck_el1
plot(auck_el1)
class(auck_el1)
slot(auck_el1, "grid")
class(auck_el1)
slot(auck_el1, "grid")
auck_el1#add.
raster1 <- raster(file.choose())
auck_el1 <- as(raster1,"SpatialGridDataFrame")
auck_el1#add.
class(auck_el1)
slot(auck_el1, "grid")
slot(auck_el1, "bbox")
object.size(auck_el1)
object.size(slot(auck_el1, "data"))
auck_el1$band1
is.na(auck_el1$band1) <- auck_el1$band1 <= 0
auck_el1 <- as(raster1,"SpatialGridDataFrame") #not as its supposed to be in the book
class(auck_el1)
slot(auck_el1, "grid")
slot(auck_el1, "bbox")
object.size(auck_el1)
object.size(slot(auck_el1, "data"))
is.na(auck_el1$band1) <- auck_el1$band1 <= 0
summary(auck_el1$band1)
#p.51
library(raster)
is.na(auck_el1$band1) <- auck_el1$band1 <= 0
auck_el1#add.
str(auck_el1$band1)
dim(auck_el1$band1)
auck_el1$BinValues
View(auck_el1)
is.na(auck_el1$BinValues) <- auck_el1$BinValues<= 0
names(auck_el1)
auck_el1$X70042108
is.na(auck_el1$X70042108) <- auck_el1$X70042108<= 0
auck_el2 <- as(auck_el1, "SpatialPixelsDataFrame")
object.size(auck_el2)
object.size(slot(auck_el2, "grid.index"))
object.size(slot(auck_el2, "coords"))
sum(is.na(auck_el1$band1)) + nrow(slot(auck_el2, "coords"))
sum(is.na(auck_el1$X70042108)) + nrow(slot(auck_el2, "coords"))
#p.52
prod(slot(slot(auck_el2, "grid"), "cells.dim"))
auck_el_500 <- auck_el2[auck_el2$X70042108 > 500, ]
summary(auck_el_500)
object.size(auck_el_500)
data(meuse.grid)
mg_SP <- SpatialPoints(cbind(meuse.grid$x, meuse.grid$y))
summary(mg_SP)
mg_SPix0 <- SpatialPixels(mg_SP)
summary(mg_SPix0)
prod(slot(slot(mg_SPix0, "grid"), "cells.dim"))
mg_SPix1 <- as(mg_SP, "SpatialPixels")
summary(mg_SPix1)
r<- raster(file.choose())
class(r)
inMemory(r)
object.size(r)
#p.55
cellStats(r, max)
cellStats(r, min)
inMemory(r)
out <- raster(r)
s <- blockSize(out)
out <- writeStart(out, filename = tempfile(), overwrite = TRUE)
for (i in 1:bs$n) {
v <- getValues(r, row = bs$row[i], nrows = bs$nrows[i])
v[v <= 0] <- NA
writeValues(out, v, bs$row[i])}
out <- raster(r)
bs <- blockSize(out)
out <- writeStart(out, filename = tempfile(), overwrite = TRUE)
for (i in 1:bs$n) {
v <- getValues(r, row = bs$row[i], nrows = bs$nrows[i])
v[v <= 0] <- NA
writeValues(out, v, bs$row[i])}
out <- writeStop(out)
out <- raster(r)
bs <- blockSize(out)
out <- writeStart(out, filename = tempfile(), overwrite = TRUE)
for (i in 1:bs$n) {
v <- getValues(r, row = bs$row[i], nrows = bs$nrows[i])
v[v <= 0] <- NA
writeValues(out, v, bs$row[i])}
out <- writeStop(out)
cellStats(out, min)
cellStats(out, max)
inMemory(out)
plot(out, col = terrain.colors(100))
r1 <- as(out, "SpatialGridDataFrame")
summary(r1)
#p.56
r2 <- as(r1, "RasterLayer")
summary(r2)
