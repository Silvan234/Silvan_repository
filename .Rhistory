islands_auck <- sapply(lns, function(x) {
crds <- slot(slot(x, "Lines")[[1]], "coords")
identical(crds[1, ], crds[nrow(crds), ]) })
islands_auck <- sapply(lns, function(x) {
crds <- slot(slot(x, "Lines")[[1]], "coords")
identical(crds[1, ], crds[nrow(crds), ]) })
table(islands_auck)
#p.42
plot(islands_auck)
getClass("Polygon")
getClass("Polygons")
getClass("SpatialPolygons")
#p.44
islands_sl <- auck_shore[islands_auck]
list_of_Lines <- slot(islands_sl, "lines")
islands_sp <- SpatialPolygons(lapply(list_of_Lines, function(x) {
Polygons(list(Polygon(slot(slot(x, "Lines")[[1]],
"coords"))), ID = slot(x, "ID"))
}), proj4string = CRS("+proj=longlat +ellps=WGS84"))
summary(islands_sp)
order(sapply(slot(islands_sp, "polygons"), function(x) slot(x,"area")), decreasing = TRUE)
library(maps)
state.map <- map("state", plot = FALSE, fill = TRUE)
IDs <- sapply(strsplit(state.map$names, ":"), function(x) x[1])
IDs
state.map
plot(state.map)
plot(state.division)
state
plot(state.)
plot(state.area)
plot(state.map)
IDs <- sapply(strsplit(state.map$names, ":"), function(x) x[1])
IDs
state.map$names #additional
plot(state.map$maps) #additonal
plot(state.map$names) #additonal
plot(state.map) #additonal
state.map$names #additional
IDs
IDs <- sapply(strsplit(state.map$names, ":"), function(x) x[1])
library(maptools)
state.sp <- map2SpatialPolygons(state.map, IDs = IDs,
proj4string = CRS("+proj=longlat +ellps=WGS84"))
state.sp
plot(state.sp)
state.map #additional
plot(state.map) #additional
state.map #additional
IDs  #additional
plot(state.sp)
sat <- read.table(file.choose(), row.names = 5, #"state.sat.data_mod.txt"
header = TRUE)
str(sat)
plot(sat)
state.map <- map("state", plot = T, fill = F)
state.map <- map("state", plot = T, fill = T)
state.map <- map("state", plot = F, fill = T)
names(sat)
id <- match(row.names(sat), row.names(state.sp))
id
plot(id)
names(id)
str(id)
row.names(sat)[is.na(id)]
sat1 <- sat[!is.na(id), ]
sat1
str(sat1)
state.spdf <- SpatialPolygonsDataFrame(state.sp, sat1)
state.sdpf
state.spdf <- SpatialPolygonsDataFrame(state.sp, sat1)
state.sdpf
str(slot(state.spdf, "data"))
str(state.spdf, max.level = 2)
str(state.spdf)
#p.46
sat1[2]
rownames
rownames(sat1)
rownames(sat1)[2]
rownames(sat1)[2] <- "Arizona"
rownames(sat1)[2]
SpatialPolygonsDataFrame(state.sp, sat1)
DC <- "district of columbia"
not_dc <- !(row.names(state.spdf) == DC)
DC
not_dc
not_dc <- !(row.names(state.spdf) = DC)
state.spdf1 <- state.spdf[not_dc, ]
state.spdf1
state.spdf1
dim(state.spdf1)
names(state.sdpf1)
str(sdpf1)
str(sdpf1)
str(spdf1)
names(spdf1)
names(state.spdf1)
names(state.spdf1) #add.
str(state.sdpf1)
str(state.spdf1)
dim(state.spdf1)
names(state.spdf1) #add.
dim(state.spdf1)
state.spdf1 #add.
summary(state.spdf1)
load(file.choose())
manitoulin <- high[[4]]
manitoulin_sp <- high[[4]]
load(file.choose())
manitoulin_sp <- high[[4]]
load(file.choose())
load(file="C:/Silvan/Silvan/Uni Wü Master/MB2_R/cm_bundle/high")
load(file.choose())
load(file.choose())
view(high)
View(high)
manitoulin_sp <- high[[4]]
load(file.choose())
View(high)
manitoulin_sp <- high[[4]]
length(slot(manitoulin_sp, "polygons"))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "hole"))
manitoulin_sp
plot(man)
plot(manitoulin_sp)
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "hole"))
str(manitoulin_sp)
namesmanitoulin_sp)
names(manitoulin_sp)
summary(manitoulin_sp)
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "ringDir"))
manitoulin_sp$hole
manitoulin_sp[]
manitoulin_sp[[1]]
manitoulin_sp(1)
dim(manitoulin_sp)
str(manitoulin_sp)
manitoulin_sp[area]
manitoulin_sp[1
manitoulin_sp[1]
manitoulin_sp
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "hole"))
sapply(slot(slot(manitoulin_sp, "polygons")[[1]], "Polygons"),
function(x) slot(x, "ringDir"))
manitoulin_sp #add.
str(manitoulin_sp)
library(rgeos)
manitoulin_sp <- createSPComment(manitoulin_sp)
sapply(slot(manitoulin_sp, "polygons"), comment)
plot(manitoulin_sp)
getClass("GridTopology")
bb <- bbox(manitoulin_sp)
bb
cs <- c(0.01, 0.01)
cs
cc <- bb[, 1] + (cs/2)
cc
bb
cd <- ceiling(diff(t(bb))/cs)
cd
manitoulin_grd <- GridTopology(cellcentre.offset = cc,
cellsize = cs, cells.dim = cd)
manitoulin_grd
plot(manitoulin_grd)
manitoulin_grd
getClass("SpatialGrid")
p4s <- CRS(proj4string(manitoulin_sp))
manitoulin_SG <- SpatialGrid(manitoulin_grd, proj4string = p4s)
summary(manitoulin_SG)
summary(manitoulin_SG)
class(auck_el1)
auck_el1 <- raster(file.choose())
class(auck_el1)
slot(auck_el1, "grid")
auck_el1
plot(auck_el1)
class(auck_el1)
slot(auck_el1, "grid")
class(auck_el1)
slot(auck_el1, "grid")
auck_el1#add.
raster1 <- raster(file.choose())
auck_el1 <- as(raster1,"SpatialGridDataFrame")
auck_el1#add.
class(auck_el1)
slot(auck_el1, "grid")
slot(auck_el1, "bbox")
object.size(auck_el1)
object.size(slot(auck_el1, "data"))
auck_el1$band1
is.na(auck_el1$band1) <- auck_el1$band1 <= 0
auck_el1 <- as(raster1,"SpatialGridDataFrame") #not as its supposed to be in the book
class(auck_el1)
slot(auck_el1, "grid")
slot(auck_el1, "bbox")
object.size(auck_el1)
object.size(slot(auck_el1, "data"))
is.na(auck_el1$band1) <- auck_el1$band1 <= 0
summary(auck_el1$band1)
#p.51
library(raster)
is.na(auck_el1$band1) <- auck_el1$band1 <= 0
auck_el1#add.
str(auck_el1$band1)
dim(auck_el1$band1)
auck_el1$BinValues
View(auck_el1)
is.na(auck_el1$BinValues) <- auck_el1$BinValues<= 0
names(auck_el1)
auck_el1$X70042108
is.na(auck_el1$X70042108) <- auck_el1$X70042108<= 0
auck_el2 <- as(auck_el1, "SpatialPixelsDataFrame")
object.size(auck_el2)
object.size(slot(auck_el2, "grid.index"))
object.size(slot(auck_el2, "coords"))
sum(is.na(auck_el1$band1)) + nrow(slot(auck_el2, "coords"))
sum(is.na(auck_el1$X70042108)) + nrow(slot(auck_el2, "coords"))
#p.52
prod(slot(slot(auck_el2, "grid"), "cells.dim"))
auck_el_500 <- auck_el2[auck_el2$X70042108 > 500, ]
summary(auck_el_500)
object.size(auck_el_500)
data(meuse.grid)
mg_SP <- SpatialPoints(cbind(meuse.grid$x, meuse.grid$y))
summary(mg_SP)
mg_SPix0 <- SpatialPixels(mg_SP)
summary(mg_SPix0)
prod(slot(slot(mg_SPix0, "grid"), "cells.dim"))
mg_SPix1 <- as(mg_SP, "SpatialPixels")
summary(mg_SPix1)
r<- raster(file.choose())
class(r)
inMemory(r)
object.size(r)
#p.55
cellStats(r, max)
cellStats(r, min)
inMemory(r)
out <- raster(r)
s <- blockSize(out)
out <- writeStart(out, filename = tempfile(), overwrite = TRUE)
for (i in 1:bs$n) {
v <- getValues(r, row = bs$row[i], nrows = bs$nrows[i])
v[v <= 0] <- NA
writeValues(out, v, bs$row[i])}
out <- raster(r)
bs <- blockSize(out)
out <- writeStart(out, filename = tempfile(), overwrite = TRUE)
for (i in 1:bs$n) {
v <- getValues(r, row = bs$row[i], nrows = bs$nrows[i])
v[v <= 0] <- NA
writeValues(out, v, bs$row[i])}
out <- writeStop(out)
out <- raster(r)
bs <- blockSize(out)
out <- writeStart(out, filename = tempfile(), overwrite = TRUE)
for (i in 1:bs$n) {
v <- getValues(r, row = bs$row[i], nrows = bs$nrows[i])
v[v <= 0] <- NA
writeValues(out, v, bs$row[i])}
out <- writeStop(out)
cellStats(out, min)
cellStats(out, max)
inMemory(out)
plot(out, col = terrain.colors(100))
r1 <- as(out, "SpatialGridDataFrame")
summary(r1)
#p.56
r2 <- as(r1, "RasterLayer")
summary(r2)
names(auck_el1)# Very important, as name is not band1 but X70042108
summary(auck_el1)
class(cars)
typeof(cars)
names(cars) #data frame with two variables
summary(cars)
str(cars)
class(dist~speed) #formula
lm(dist ~ speed, data = cars) #lm = linear model
cars$qspeed <- cut(cars$speed, breaks = quantile(cars$speed), include.lowest = TRUE)
is.factor(cars$qspeed)
plot(dist ~ speed, data = cars)
plot(dist ~ qspeed, data = cars)
lm(dist ~ qspeed, data = cars)
getClass("CRS")
m <- matrix(c(0, 0, 1, 1), ncol = 2, dimnames = list(NULL,c("min", "max")))
m #additional
plot(m) #additional
crs <- CRS(projargs = as.character(NA))
crs
S <- Spatial(bbox = m, proj4string = crs)
S
bb <- matrix(c(350, 85, 370, 95), ncol = 2, dimnames = list(NULL, c("min", "max")))
bb #additional
plot(bb)#additional
Spatial(bb, proj4string = CRS("+proj=longlat")) #not like this in the book
CRAN_df <- read.table(file.choose(), header = TRUE) #read data using file.choose() CRAN51001a.txt
CRAN_mat <- cbind(CRAN_df$long, CRAN_df$lat) #combining longitude and latitude in CRAN_mat
CRAN_mat #additional to check result
row.names(CRAN_mat) <- 1:nrow(CRAN_mat) #rownames
row.names((CRAN_mat)) #additional to check result
str(CRAN_mat)
getClass("SpatialPoints") #get class definition of "SpatialPoints"
llCRS <- CRS("+proj=longlat +ellps=WGS84")
CRAN_sp <- SpatialPoints(CRAN_mat, proj4string = llCRS)
CRAN_sp #additional
plot(CRAN_sp) #additional
summary(CRAN_sp)
brazil <- which(CRAN_df$loc == "Brazil")
brazil
coordinates(CRAN_sp)[brazil, ]
summary(CRAN_sp[brazil, ])
japan <- map("world", "japan", plot = T) #alternatively: set plot to T and get map of japan
library(maps)
library(maptools)
japan <- map("world", "japan", plot = T) #alternatively: set plot to T and get map of japan
p4s <- CRS("+proj=longlat +ellps=WGS84")
SLjapan <- map2SpatialLines(japan, proj4string = p4s)
str(SLjapan, max.level = 2)
a <- runif(199)
b <- c("aa","bb","cc","dd","ee")
c <- list(a,b)
c
c[2]
c[[2]]
c[[2]][1]
a <- list(obj_1=runif(100)), obj_2= runif("a","b"), obj_3=c(1,2,4))
a <- list(obj_1=runif(100), obj_2= runif("a","b"), obj_3=c(1,2,4))
a <- list(obj_1=runif(100), obj_2= c("a","b"), obj_3=c(1,2,4))
a$obj_1
a[["obj_1"]]
a[[2]]
a[[1]]
a <- list(m1=matrix(runif(50),nrow=5),v1=c(1,6,10),df1=data.frame(a=runif(100),b=rnorm(100)))
a$df1[,1]
myfunction(2,3)
myfunction <- function(x,y){
x+y
}
myfunction(2,3)
img =brick("C:/Silvan/Silvan/Uni Wü Master/MB2_R/Sentinel_2_20160512.tif")
ndvi <- calc(img, fun=function(x) {(x[,4]-x[,3])/(x[,4]+x[,3])})
plot(ndvi)
sessioninfo
sessioninfo()
sessionInfo()
library(RStoolbox)
str(ndvi)
ndvi_2 <- spectralIndices(img,red="img[3]",nir="img[4]",indices="NDVI")
ndvi_2 <- spectralIndices(img,red=img[3],nir=img[4],indices="NDVI")
ndvi_2 <- spectralIndices(img,red="red",nir="nir",indices="NDVI")
red <- img[3]
nir <- img[4]
ndvi_2 <- spectralIndices(img,red="red",nir="nir",indices="NDVI")
img
x <- stack(red,nir)
red <- img[[3][]
x <- stack(red,nir)
red <- img[[3][]
red <- img[[3]]
nir <- img[[4]]
x <- stack(red,nir)
names(img)
names(img)[4]
names(img)[4]
names(img)[4]
ndvi_2 <- spectralIndices(x,red=names(img)[4],nir=names(img[3]),indices="NDVI")
ndvi_2 <- spectralIndices(x,red="names(img)[4]",nir="names(img[3]"),indices="NDVI")
ndvi_2 <- spectralIndices(x,red=names(img)[[4]]),nir=names(img[[3]]),indices="NDVI")
ndvi_2 <- spectralIndices(img,red=names(img)[[4]]),nir=names(img[[3]]),indices="NDVI")
ndvi_2 <- spectralIndices(img, red=names(img[[4]]),nir=names(img[[3]]),indices="NDVI")
plot(ndvi_2)
ndvi_2 <- spectralIndices(img, red=names(img[[3]]),nir=names(img[[4]]),indices="NDVI")
plot(ndvi_2)
names(img)[4]
ndvi_2 <- spectralIndices(img, red=names(img[[3]]),nir= x,indices="NDVI")
x <- names(img)[4]
ndvi_2 <- spectralIndices(img, red=names(img[[3]]),nir= x,indices="NDVI")
x <- names(img)[4]
y <- names(img)[3]
ndvi_2 <- spectralIndices(img, red=y,nir= x,indices="NDVI")
names(img)
ndvi_0 <- spectralIndices(img, red="Sentinel_2_20160512.3",nir="Sentinel_2_20160512.4",indices="NDVI")
#
library(RStoolbox)
uc <- unsuperClass(img,nClasses=5)
plot(uc$map)
img_kmeans <- kmeans(img[],5)
img_kmeans <- kmeans(img[],5)
kmeansraster <- raster(img)
kmeansraster[] <- img_kmeans$cluster
plot(kmeansraster)
img_kmeans <- kmeans(img[],5)
kmeansraster <- raster(img)
kmeansraster
click(kmeansraster, n=3)
click(kmeansraster, n=3)
click(kmeansraster, n=3)
plot(kmeansraster)
img_kmeans <- kmeans(img[],5)
kmeansraster <- raster(img)
kmeansraster[] <- img_kmeans$cluster
plot(kmeansraster)
click(kmeansraster, n=3)
arg <- list(at=seq(1,5,1),labels=c("none","none","water","forest","defo"))
color <- c("white","white,"blue","green","brown")
color <- c("white","white","blue","green","brown")
plot (kmeansraster,col=color, axis.arg=arg)
plot(kmeansraster)
plot(img)
plot(kmeansraster)
plot (kmeansraster,col=color, axis.arg=arg)
arg <- list(at=seq(1:5),labels=c("none","none","water","forest","defo"))
color <- c("white","white","blue","green","brown")
plot (kmeansraster,col=color, axis.arg=arg)
library(ggplot2)
x11()
x <- data.frame(x=1,y=1,label="ggplot2 introduction\n@ EAGLE")
ggplot(data=x, aes=(x=x, y=y))+ geom_text(aes(label=label),size=15)
ggplot(data=x, aes=(x=x, y=y))+ geom_text(aes(label=label),size=15)
ggplot(data=x, aes=(x=x, y=y))+ geom_text(aes(label=label),size=15)
ggplot(data=x, aes=(x=x , y=y))+ geom_text(aes(label=label),size=15)
install.packages("devtools")
library(devtools)
install_bitbucket("EAGLE_MSc/steigerwald", build_vignettes=TRUE)
library(steigerwald)
head(bio_data)
ggplot(bio_data$forest, aes(x=beech,y=ndvi))+geom_point
ggplot(bio_data$forest, aes(x=beech,y=ndvi))+geom_point()
ggplot(bio_data$forest,aes(beech,ndvi,colour=height)) +
geom_point() +geom_smooth()
ggplot(bio_data$forest, aes(beech,ndvi)) +
geom_point()+
facet_wrap(~sub_basin)
ggplot(bio_data$forest, aes(beech,ndvi)) +
geom_point()
ggplot(bio_data$forest, aes(beech,ndvi))+
geom_point()+
facet_wrap(~sub_basin)
ggplot(bio_data$forest, aes(beech,ndvi))+
geom_point()+
facet_wrap(~sub_basin)+
geom_smooth()
ggplot(bio_data$forest, aes(beech,ndvi))+
geom_point()+
facet_wrap(~sub_basin)+
geom_smooth()
ggplot(bio_data$forest, aes(beech,ndvi))+
geom_point()+
facet_wrap(~sub_basin)
ggplot(bio_data$forest, aes(beech,ndvi))+
geom_point()+
facet_wrap(~sub_basin)+
geom_smooth()
ggplot(bio_data$forest, aes(beech,ndvi))+
geom_point()+
facet_wrap(~sub_basin)
ggplot(bio_data$forest, aes(beech,ndvi, color=green))+
geom_point()+
facet_wrap(~sub_basin)
ggplot(bio_data$forest, aes(beech,ndvi, color=#FF5733)+
geom_point()+
ggplot(bio_data$forest, aes(beech,ndvi, color=height)+
ggplot(bio_data$forest, aes(beech,ndvi, color=height)+
ggplot(bio_data$forest, aes(beech,ndvi, color=height)+
geom_point()+
facet_wrap(~sub_basin)
ggplot(bio_data$forest, aes(beech,ndvi, color=height)+
geom_point()+
facet_wrap(~sub_basin))
facet_wrap(~sub_basin)
ggplot(bio_data$forest, aes(beech,ndvi, colour=height)+
geom_point()+geom_smooth()
ggplot((bio_data$forest, aes(beech,ndvi, colour=height)+
ggplot(bio_data$forest, aes(sub_basin,ndvi))+
geom_boxplot(alpha=.5)+
geom_point(aes(color=height), alpha=.7,size=1.5,position =position.jitter(width=.25,height=0))
ggplot(bio_data$forest, aes(sub_basin,ndvi))+
geom_boxplot(alpha=.5)+
geom_point(aes(color=height), alpha=.7,size=1.5,position =position_jitter(width=.25,height=0))
ggplot(bio_data$forest, aes(sub_basin,ndvi))+
geom_boxplot(alpha=.5)+
geom_point(aes(color=height), alpha=.7,size=1.5,position =position_jitter(width=0,height=0))
ggplot(bio_data$forest, aes(sub_basin,ndvi))+
geom_boxplot(alpha=.5)+
geom_point(aes(color=height), alpha=.7,size=1.5,position =position_jitter(width=.25,height=0))
a <- ggplot(bio_data$forest, aes(sub_basin,ndvi))+
geom_boxplot(alpha=.5)
geom_point(aes(color=height), alpha=.7,size=1.5,position =position_jitter(width=.25,height=0))
a+  geom_point(aes(color=height), alpha=.7,size=1.5,position =position_jitter(width=.25,height=0))
a <- ggplot(bio_data$forest, aes(sub_basin,ndvi))+
geom_boxplot(alpha=.5)+
geom_point(aes(color=height), alpha=.7,size=1.5,position =position_jitter(width=.25,height=0))
ggplot()+ geom_point(data=bio_data$forest, aes(sub_basin,ndvi))
ggplot()+geom_point(data=bio_data$forest, aes(sub_basin,ndvi,colour="blue"))
ggplot()+geom_point(data=bio_data$forest, aes(sub_basin,ndvi),colour="blue")
ggplot(bio_data$forest, aes(x=beech, y=ndvi))
ggplot(bio_data$forest, aes(x=beech, y=ndvi))+
geom_jitter()
ggplot(bio_data$forest, aes(x=beech, y=ndvi)) +
geom_jitter()
ggplot(bio_data$forest, aes(x=beech, y=ndvi)) +
geom_boxplot()
ggplot(bio_data$forest, aes(x=beech, y=ndvi)) +
geom_violin() + geom_jitter(aes(alpha=.7,size=2),colour="blue")
a <- ggplot() +geom_point(data=bio_data$forest, aes(sub_basin,ndvi, colour=height)
a <- ggplot() +geom_point(data=bio_data$forest, aes(sub_basin,ndvi, colour=height))
